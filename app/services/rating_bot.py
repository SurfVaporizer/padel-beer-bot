import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatMemberStatus
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.models.database import get_db, UserRating

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import sqlite3
import os
from datetime import datetime

def get_db_path():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º local_rating_bot.db
    default_url = "sqlite+aiosqlite:///./local_rating_bot.db"
    db_url = os.getenv("DATABASE_URL", default_url)
    return db_url.replace("sqlite+aiosqlite:///", "")

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = get_db_path()
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn

def ensure_user_exists(telegram_id: int):
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ"""
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT OR IGNORE INTO user_ratings (telegram_id, rating, created_at, updated_at) VALUES (?, ?, ?, ?)",
            (telegram_id, 0, datetime.now(), datetime.now())
        )
        conn.commit()
    finally:
        conn.close()

def set_rating(user_id: int, rating: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    ensure_user_exists(user_id)
    conn = get_db_connection()
    try:
        conn.execute(
            "UPDATE user_ratings SET rating = ?, updated_at = ? WHERE telegram_id = ?",
            (rating, datetime.now(), user_id)
        )
        conn.commit()
    finally:
        conn.close()

def get_rating(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT rating FROM user_ratings WHERE telegram_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result and result[0] is not None else 0
    finally:
        conn.close()

def set_pt_userid(user_id: int, pt_userid: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    ensure_user_exists(user_id)
    conn = get_db_connection()
    try:
        conn.execute(
            "UPDATE user_ratings SET PT_userId = ?, updated_at = ? WHERE telegram_id = ?",
            (pt_userid, datetime.now(), user_id)
        )
        conn.commit()
    finally:
        conn.close()

def get_pt_userid(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å PlayTomic ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT PT_userId FROM user_ratings WHERE telegram_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result and result[0] is not None else ""
    finally:
        conn.close()

# --- helper: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    chat = update.effective_chat
    user = update.effective_user
    if not chat or chat.type == "private":
        # –í –ª–∏—á–∫–µ –∑–∞–ø—Ä–µ—â–∞–µ–º (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ True, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ ¬´–∏–∑–≤–µ—Å—Ç–Ω—ã–º¬ª –∞–¥–º–∏–Ω–∞–º)
        return False
    member = await context.bot.get_chat_member(chat.id, user.id)
    return member.status in (ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR)

class RatingBot:
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        welcome_text = f"""
üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rating Bot, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ PlayTomic ID.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/getrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–º–æ—â—å
        """
        await update.message.reply_text(welcome_text)

    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        is_user_admin = await is_admin(update, context)
        
        if is_user_admin:
            help_text = """
üéæ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /setrating: –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ user_id –∏–ª–∏ —Å–µ–±–µ
‚Ä¢ /setptid: –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ user_id –∏–ª–∏ —Å–µ–±–µ
‚Ä¢ /getrating, /getptid, /profile: –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ user_id –∏–ª–∏ —Å–≤–æ–π
            """
        else:
            help_text = """
üéæ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –°–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ /setrating 12 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ —Ä–µ–π—Ç–∏–Ω–≥ 12
‚Ä¢ /setptid myusername - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID
‚Ä¢ /profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–º–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
            """
        
        await update.message.reply_text(help_text)

    @staticmethod
    async def get_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getrating - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"""
        user_id = update.effective_user.id
        rating = get_rating(user_id)
        
        await update.message.reply_text(f"üèÜ –í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}")

    @staticmethod
    async def set_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setrating - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"""
        args = context.args
        current_user_id = update.effective_user.id
        is_user_admin = await is_admin(update, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
        target_user_id = None
        rating_val = None

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ -> user = replied (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if update.message and update.message.reply_to_message and len(args) == 1 and args[0].isdigit():
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = update.message.reply_to_message.from_user.id
            rating_val = int(args[0])

        # –í–∞—Ä–∏–∞–Ω—Ç 2: /setrating <user_id> <rating> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].isdigit() and args[1].isdigit():
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = int(args[0])
            rating_val = int(args[1])

        # –í–∞—Ä–∏–∞–Ω—Ç 3: /setrating <rating> ‚Äî —Å–µ–±–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        elif len(args) == 1 and args[0].isdigit():
            target_user_id = current_user_id
            rating_val = int(args[0])

        if target_user_id is None or rating_val is None:
            if is_user_admin:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setrating 12\n"
                    "‚Ä¢ –Ø–≤–Ω–æ –ø–æ user_id: /setrating 123456789 12\n"
                    "‚Ä¢ –°–µ–±–µ: /setrating 12"
                )
            else:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –°–µ–±–µ: /setrating 12\n\n"
                    "üí° –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
                )

        set_rating(target_user_id, rating_val)
        who = "–≤–∞–º" if target_user_id == current_user_id else f"user_id={target_user_id}"
        await update.message.reply_text(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {who} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating_val}")

    @staticmethod
    async def get_user_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        target_user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        rating = get_rating(target_user_id)
        pt_userid = get_pt_userid(target_user_id)
        pt_info = f" (PlayTomic: {pt_userid})" if pt_userid else ""
        await update.message.reply_text(f"üèÜ {target_username} —Ä–µ–π—Ç–∏–Ω–≥: {rating}{pt_info}")

    @staticmethod
    async def set_pt_userid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setptid - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID"""
        args = context.args
        current_user_id = update.effective_user.id
        is_user_admin = await is_admin(update, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∏ PlayTomic ID
        target_user_id = None
        pt_userid = None

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ -> user = replied (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if update.message and update.message.reply_to_message and len(args) == 1:
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = update.message.reply_to_message.from_user.id
            pt_userid = args[0]

        # –í–∞—Ä–∏–∞–Ω—Ç 2: /setptid <user_id> <pt_userid> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].isdigit():
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = int(args[0])
            pt_userid = args[1]

        # –í–∞—Ä–∏–∞–Ω—Ç 3: /setptid <pt_userid> ‚Äî —Å–µ–±–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        elif len(args) == 1:
            target_user_id = current_user_id
            pt_userid = args[0]

        if target_user_id is None or pt_userid is None:
            if is_user_admin:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setptid playtomic_username\n"
                    "‚Ä¢ –Ø–≤–Ω–æ –ø–æ user_id: /setptid 123456789 playtomic_username\n"
                    "‚Ä¢ –°–µ–±–µ: /setptid playtomic_username"
                )
            else:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –°–µ–±–µ: /setptid playtomic_username\n\n"
                    "üí° –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
                )

        set_pt_userid(target_user_id, pt_userid)
        who = "–≤–∞–º" if target_user_id == current_user_id else f"user_id={target_user_id}"
        await update.message.reply_text(f"‚úÖ PlayTomic ID {who} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {pt_userid}")

    @staticmethod
    async def get_pt_userid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getptid - –ø–æ–ª—É—á–∏—Ç—å PlayTomic ID"""
        target_user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PlayTomic ID —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        pt_userid = get_pt_userid(target_user_id)
        if pt_userid:
            await update.message.reply_text(f"üéæ {target_username} PlayTomic ID: {pt_userid}")
        else:
            await update.message.reply_text(f"‚ùå {target_username} PlayTomic ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    @staticmethod
    async def get_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        target_user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        rating = get_rating(target_user_id)
        pt_userid = get_pt_userid(target_user_id)
        
        profile_text = f"üë§ {target_username} –ø—Ä–æ—Ñ–∏–ª—å:\n"
        profile_text += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
        if pt_userid:
            profile_text += f"üéæ PlayTomic ID: {pt_userid}"
        else:
            profile_text += f"üéæ PlayTomic ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        await update.message.reply_text(profile_text)
