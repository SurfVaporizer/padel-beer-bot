import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatMemberStatus
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.models.database import get_db, UserRating

logger = logging.getLogger(__name__)

# --- helper: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def safe_reply(update: Update, text: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None"""
    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text)
    elif update.effective_chat:
        await update.get_bot().send_message(chat_id=update.effective_chat.id, text=text)
    else:
        logger.error(f"Cannot send message - no valid chat context: {text}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import sqlite3
import os
from datetime import datetime

def get_db_path():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º local_rating_bot.db
    default_url = "sqlite+aiosqlite:///./local_rating_bot.db"
    db_url = os.getenv("DATABASE_URL", default_url)
    return db_url.replace("sqlite+aiosqlite:///", "")

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = get_db_path()
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn

def ensure_user_exists(telegram_id: int, username: str = None, first_name: str = None):
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ"""
    conn = get_db_connection()
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
        conn.execute(
            "INSERT OR IGNORE INTO user_ratings (telegram_id, telegram_username, first_name, rating, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)",
            (telegram_id, username, first_name, 0, datetime.now(), datetime.now())
        )
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º username –∏ first_name (–æ–Ω–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        if username is not None or first_name is not None:
            conn.execute(
                "UPDATE user_ratings SET telegram_username = ?, first_name = ?, updated_at = ? WHERE telegram_id = ?",
                (username, first_name, datetime.now(), telegram_id)
            )
        
        conn.commit()
    finally:
        conn.close()

def parse_rating(rating_str: str) -> float:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        normalized_str = rating_str.replace(',', '.')
        rating = float(normalized_str)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return round(rating, 2)
    except ValueError:
        return None

def is_valid_playtomic_rating(rating: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞–ª–∏–¥–Ω—ã–º –ø–æ —à–∫–∞–ª–µ Playtomic (0.5-6.0)"""
    return 0.5 <= rating <= 6.0

def get_playtomic_rating_message(rating: float) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ —à–∫–∞–ª–µ Playtomic"""
    if rating > 6.0:
        return "ü§Ø –ß—Ç–æ-—Ç–æ –Ω–∞ –¢–∞–ø–∏—é —Ç—ã –Ω–µ –ø–æ—Ö–æ–∂ –∏ –¥–∞–∂–µ –Ω–µ –ß–∏–Ω–≥–æ—Ç–æ! –†–µ–π—Ç–∏–Ω–≥ –ø–æ —à–∫–∞–ª–µ Playtomic –æ—Ç 0.5 –¥–æ 6.0"
    elif rating < 0.5:
        return "‚ùå –†–µ–π—Ç–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π! –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —à–∫–∞–ª–µ Playtomic: 0.5"
    elif rating >= 5.5:
        return "üèÜ –ü–†–û —É—Ä–æ–≤–µ–Ω—å! –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫!"
    elif rating >= 4.5:
        return "üí™ –û—Ç–ª–∏—á–Ω—ã–π –∏–≥—Ä–æ–∫!"
    elif rating >= 3.5:
        return "üëç –•–æ—Ä–æ—à–∏–π –∏–≥—Ä–æ–∫!"
    elif rating >= 2.5:
        return "üìà –†–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫!"
    elif rating >= 1.5:
        return "üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π –∏–≥—Ä–æ–∫!"
    else:
        return "üéØ –ù–∞—á–∏–Ω–∞—é—â–∏–π –ø—É—Ç—å –≤ –ø–∞–¥–µ–ª–µ!"

def is_valid_rating(rating_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –ø–æ —à–∫–∞–ª–µ Playtomic"""
    rating = parse_rating(rating_str)
    return rating is not None and is_valid_playtomic_rating(rating)

def get_user_id_by_username(username: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ username"""
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_username = username.lstrip('@').lower()
    
    conn = get_db_connection()
    try:
        cursor = conn.execute(
            "SELECT telegram_id FROM user_ratings WHERE LOWER(telegram_username) = ?", 
            (clean_username,)
        )
        result = cursor.fetchone()
        return result[0] if result else None
    finally:
        conn.close()

async def get_user_from_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, username: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —á–∞—Ç–∞ –ø–æ @username"""
    try:
        chat = update.effective_chat
        if not chat or chat.type == "private":
            logger.debug(f"Not a group chat, cannot search for {username}")
            return None, None, None
        
        # –û—á–∏—â–∞–µ–º username –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ @ –≤ –Ω–∞—á–∞–ª–µ
        clean_username = username.lstrip('@')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
        if not clean_username:
            logger.warning(f"Empty username after cleaning: '{username}'")
            return None, None, None
            
        logger.info(f"Searching for user '{clean_username}' in chat {chat.id} ({getattr(chat, 'title', 'No title')})")
        logger.info(f"Original input: '{username}' ‚Üí cleaned: '{clean_username}'")
        
        # –ú–µ—Ç–æ–¥ 1: –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ get_chat("@username")
        try:
            search_username = f"@{clean_username}"
            logger.info(f"Trying get_chat('{search_username}') to get user ID...")
            user_chat = await context.bot.get_chat(search_username)
            
            if user_chat and user_chat.id:
                user_id = user_chat.id
                logger.info(f"SUCCESS: Got user ID {user_id} from get_chat('{search_username}')")
                
                # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ
                try:
                    member = await context.bot.get_chat_member(chat.id, user_id)
                    if member and member.user and not member.user.is_bot:
                        logger.info(f"SUCCESS: User @{clean_username} (ID={user_id}) confirmed in chat")
                        return member.user.id, member.user.username, member.user.first_name
                    else:
                        logger.warning(f"User @{clean_username} (ID={user_id}) not found in chat or is a bot")
                        
                except Exception as member_check_error:
                    logger.warning(f"Could not verify user @{clean_username} (ID={user_id}) in chat: {member_check_error}")
                    
        except Exception as get_chat_error:
            logger.info(f"get_chat('{search_username}') failed: {get_chat_error}")
        
        # –ú–µ—Ç–æ–¥ 2 (–∑–∞–ø–∞—Å–Ω–æ–π): –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            logger.info("Fallback: searching through chat administrators...")
            admins = await context.bot.get_chat_administrators(chat.id)
            logger.info(f"Found {len(admins)} administrators")
            
            for admin in admins:
                if admin.user and admin.user.username:
                    logger.debug(f"Checking admin: @{admin.user.username}")
                    if admin.user.username.lower() == clean_username.lower():
                        logger.info(f"SUCCESS: Found user among administrators: @{admin.user.username} ‚Üí ID={admin.user.id}")
                        return admin.user.id, admin.user.username, admin.user.first_name
                        
        except Exception as admin_error:
            logger.warning(f"Could not get administrators: {admin_error}")
        
        logger.warning(f"User '@{username}' not found in chat {chat.id} with any method")
        return None, None, None
        
    except Exception as e:
        logger.error(f"Critical error searching for user {username}: {e}")
        return None, None, None

def set_rating(user_id: int, rating: float, username: str = None, first_name: str = None):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    ensure_user_exists(user_id, username, first_name)
    conn = get_db_connection()
    try:
        conn.execute(
            "UPDATE user_ratings SET rating = ?, updated_at = ? WHERE telegram_id = ?",
            (rating, datetime.now(), user_id)
        )
        conn.commit()
    finally:
        conn.close()

def get_rating(user_id: int) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT rating FROM user_ratings WHERE telegram_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result and result[0] is not None else 0.0
    finally:
        conn.close()

def user_exists_in_db(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT 1 FROM user_ratings WHERE telegram_id = ?", (user_id,))
        result = cursor.fetchone()
        return result is not None
    finally:
        conn.close()

def set_pt_userid(user_id: int, pt_userid: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    ensure_user_exists(user_id)
    conn = get_db_connection()
    try:
        conn.execute(
            "UPDATE user_ratings SET PT_userId = ?, updated_at = ? WHERE telegram_id = ?",
            (pt_userid, datetime.now(), user_id)
        )
        conn.commit()
    finally:
        conn.close()

def get_pt_userid(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å PlayTomic ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT PT_userId FROM user_ratings WHERE telegram_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result and result[0] is not None else ""
    finally:
        conn.close()

# --- helper: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    chat = update.effective_chat
    user = update.effective_user
    if not chat or chat.type == "private":
        # –í –ª–∏—á–∫–µ –∑–∞–ø—Ä–µ—â–∞–µ–º (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ True, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ ¬´–∏–∑–≤–µ—Å—Ç–Ω—ã–º¬ª –∞–¥–º–∏–Ω–∞–º)
        return False
    member = await context.bot.get_chat_member(chat.id, user.id)
    return member.status in (ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR)

class RatingBot:
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            if not user_exists_in_db(user.id):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                ensure_user_exists(user.id, user.username, user.first_name)
                logger.info(f"New user added to DB: {user.id} (@{user.username or 'no_username'}) - {user.first_name}")
                
                welcome_text = f"""
üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rating Bot, {user.first_name}!

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!
üìä –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 0.0

–≠—Ç–æ—Ç –±–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ PlayTomic ID.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/getrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥  
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–º–æ—â—å
                """
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î
                current_rating = get_rating(user.id)
                welcome_text = f"""
üéæ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!

üìä –í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {current_rating}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/getrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID  
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–º–æ—â—å
                """
                
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            welcome_text = f"""
üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rating Bot, {user.first_name}!

‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ü–æ–º–æ—â—å
            """
        
        await safe_reply(update, welcome_text)

    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        is_user_admin = await is_admin(update, context)
        
        if is_user_admin:
            help_text = """
üéæ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getrating [–∞—Ä–≥—É–º–µ–Ω—Ç] - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (—Å–≤–æ–π –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/createuser - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
‚Ä¢ /setrating @username 25 - –ø–æ @username (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î)
‚Ä¢ /setrating 123456789 25 - –ø–æ telegram_id (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç)
‚Ä¢ /setrating 25 (–≤ –æ—Ç–≤–µ—Ç) - –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /setrating 25 - —Å–µ–±–µ

‚Ä¢ /createuser 123456789 25 john_player - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /getrating @username - —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ @username
‚Ä¢ /getrating 123456789 - —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ telegram_id
            """
        else:
            help_text = """
üéæ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getrating [–∞—Ä–≥—É–º–µ–Ω—Ç] - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (—Å–≤–æ–π –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –°–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ /setrating 12 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ —Ä–µ–π—Ç–∏–Ω–≥
‚Ä¢ /getrating @username - —É–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º:
‚Ä¢ /setrating @username 25
            """
        
        await safe_reply(update, help_text)

    @staticmethod
    async def get_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getrating - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (—Å–≤–æ–π –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
        args = context.args
        target_user_id = None
        target_username = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
        elif args and len(args) == 1 and args[0].startswith('@'):
            target_user_id = get_user_id_by_username(args[0])
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—â–µ–º –≤ —á–∞—Ç–µ
            if target_user_id is None:
                chat_user_id, chat_username, chat_first_name = await get_user_from_chat(update, context, args[0])
                
                if chat_user_id is not None:
                    # –ù–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ! –°–æ–∑–¥–∞–µ–º –≤ –ë–î
                    ensure_user_exists(chat_user_id, chat_username, chat_first_name)
                    target_user_id = chat_user_id
                    await safe_reply(update, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[0]} –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                else:
                    chat_info = f"—á–∞—Ç: {update.effective_chat.title or update.effective_chat.id}" if update.effective_chat else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
                    return await safe_reply(update, 
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∏ –≤ —á–∞—Ç–µ.\n\n"
                       
                        f"üí° –†–µ—à–µ–Ω–∏—è:\n"
                        f"1Ô∏è‚É£ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ {args[0]} –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start\n"
                        f"2Ô∏è‚É£ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {args[0]}: /getrating\n"
                        f"3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ telegram_id: /getrating <ID>\n"
                        f"4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: /debugchat"
                    )
            
            target_username = args[0]
            
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif args and len(args) == 1 and args[0].isdigit():
            target_user_id = int(args[0])
            target_username = f"user_id={target_user_id}"
            
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        rating = get_rating(target_user_id)
        pt_userid = get_pt_userid(target_user_id)
        pt_info = f" (PlayTomic: {pt_userid})" if pt_userid else ""
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        debug_info = f"\nüîç –û—Ç–ª–∞–¥–∫–∞: target_user_id={target_user_id}, args={args}, current_user={update.effective_user.id}"
        
        # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–≤–µ–Ω 0, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ
        if rating == 0.0:
            if target_user_id == update.effective_user.id:
                # –°–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
                message = f"üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rating}{pt_info}\n\n"
                message += "üí° –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setrating —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ PlayTomic.\n"
                message += "–ü—Ä–∏–º–µ—Ä: /setrating 3.5\n\n"
                message += "üìä –®–∫–∞–ª–∞ Playtomic: –æ—Ç 0.5 –¥–æ 6.0 (6.0 = –ü–†–û —É—Ä–æ–≤–µ–Ω—å)"
            else:
                # –ß—É–∂–æ–π —Ä–µ–π—Ç–∏–Ω–≥
                message = f"üèÜ {target_username} —Ä–µ–π—Ç–∏–Ω–≥: {rating}{pt_info}\n\n"
                message += f"üí° –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        else:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —à–∫–∞–ª–µ Playtomic
            playtomic_message = get_playtomic_rating_message(rating)
            message = f"üèÜ {target_username} —Ä–µ–π—Ç–∏–Ω–≥: {rating}{pt_info}\n\n{playtomic_message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message += debug_info
        
        await safe_reply(update, message)

    @staticmethod
    async def set_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setrating - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"""
        args = context.args
        current_user_id = update.effective_user.id
        current_username = update.effective_user.username
        current_first_name = update.effective_user.first_name
        is_user_admin = await is_admin(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        ensure_user_exists(current_user_id, current_username, current_first_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
        target_user_id = None
        rating_val = None
        target_display_name = None
        target_username = None
        target_first_name = None

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ -> user = replied (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if update.message and update.message.reply_to_message and len(args) == 1 and is_valid_rating(args[0]):
            if not is_user_admin:
                return await safe_reply(update, "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.username
            target_first_name = update.message.reply_to_message.from_user.first_name
            target_display_name = target_first_name
            rating_val = parse_rating(args[0])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            ensure_user_exists(target_user_id, target_username, target_first_name)

        # –í–∞—Ä–∏–∞–Ω—Ç 2: /setrating @username <rating> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].startswith('@') and is_valid_rating(args[1]):
            if not is_user_admin:
                return await safe_reply(update, "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            target_user_id = get_user_id_by_username(args[0])
            if target_user_id is not None:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                target_username = args[0].lstrip('@')
                # –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å first_name –∏–∑ –ë–î, –Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º None
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—â–µ–º –≤ —á–∞—Ç–µ
            if target_user_id is None:
                chat_user_id, chat_username, chat_first_name = await get_user_from_chat(update, context, args[0])
                
                if chat_user_id is not None:
                    # –ù–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ! –°–æ–∑–¥–∞–µ–º –≤ –ë–î
                    ensure_user_exists(chat_user_id, chat_username, chat_first_name)
                    target_user_id = chat_user_id
                    target_username = chat_username
                    target_first_name = chat_first_name
                    await safe_reply(update, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[0]} –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                else:
                    # –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ —á–∞—Ç–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                    chat_info = f"—á–∞—Ç: {update.effective_chat.title or update.effective_chat.id}" if update.effective_chat else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
                    return await safe_reply(update, 
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∏ –≤ —á–∞—Ç–µ.\n\n"
                        f"üîç –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤: {chat_info}\n\n"
                        f"üîß –†–µ—à–µ–Ω–∏—è:\n"
                        f"1Ô∏è‚É£ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ {args[0]} –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start\n"
                        f"2Ô∏è‚É£ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {args[0]}: /setrating {args[1]}\n"
                        f"3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ telegram_id: /setrating <ID> {args[1]}\n"
                        f"4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: /debugchat\n\n"
                        f"üí° –ï—Å–ª–∏ {args[0]} —Ç–æ—á–Ω–æ –≤ —á–∞—Ç–µ, –≤–æ–∑–º–æ–∂–Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ @username –∏–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.")
            
            target_display_name = args[0]
            rating_val = parse_rating(args[1])

        # –í–∞—Ä–∏–∞–Ω—Ç 3: /setrating <user_id> <rating> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].isdigit() and is_valid_rating(args[1]):
            if not is_user_admin:
                return await safe_reply(update, "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = int(args[0])
            target_username = None  # –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ ID
            target_first_name = None  # –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ ID
            target_display_name = f"user_id={target_user_id}"
            rating_val = parse_rating(args[1])
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            ensure_user_exists(target_user_id, None, None)

        # –í–∞—Ä–∏–∞–Ω—Ç 4: /setrating <rating> ‚Äî —Å–µ–±–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        elif len(args) == 1 and is_valid_rating(args[0]):
            target_user_id = current_user_id
            target_username = current_username
            target_first_name = current_first_name
            target_display_name = "–≤–∞–º"
            rating_val = parse_rating(args[0])

        if target_user_id is None or rating_val is None:
            if is_user_admin:
                debug_info = f"\nüîç –û—Ç–ª–∞–¥–∫–∞: target_user_id={target_user_id}, rating_val={rating_val}, args={args}"
                return await safe_reply(update, 
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setrating 2.5\n"
                    "‚Ä¢ –ü–æ @username: /setrating @john_doe 2,3\n"
                    "‚Ä¢ –°–µ–±–µ: /setrating 2.0\n\n"
                    "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞: 2.5, 1,3, 0.7\n"
                    "üìä –®–∫–∞–ª–∞ Playtomic: –æ—Ç 0.5 –¥–æ 6.0 (6.0 = –ü–†–û —É—Ä–æ–≤–µ–Ω—å)" + debug_info
                )
            else:
                return await safe_reply(update, 
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –°–µ–±–µ: /setrating 2.5\n\n"
                    "üí° –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                    "üìä –®–∫–∞–ª–∞ Playtomic: –æ—Ç 0.5 –¥–æ 6.0 (6.0 = –ü–†–û —É—Ä–æ–≤–µ–Ω—å)"
                )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ —à–∫–∞–ª–µ Playtomic
        if not is_valid_playtomic_rating(rating_val):
            playtomic_message = get_playtomic_rating_message(rating_val)
            return await safe_reply(update, f"‚ùå {playtomic_message}\n\nüí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.5 –¥–æ 6.0")
        
        set_rating(target_user_id, rating_val, target_username, target_first_name)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–π—Ç–∏–Ω–≥–µ
        playtomic_message = get_playtomic_rating_message(rating_val)
        await safe_reply(update, f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {target_display_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating_val}\n\n{playtomic_message}")

    @staticmethod
    async def get_user_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, @username –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        target_user_id = None
        target_username = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
        elif context.args and len(context.args) == 1 and context.args[0].startswith('@'):
            target_user_id = get_user_id_by_username(context.args[0])
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—â–µ–º –≤ —á–∞—Ç–µ
            if target_user_id is None:
                chat_user_id, chat_username, chat_first_name = await get_user_from_chat(update, context, context.args[0])
                
                if chat_user_id is not None:
                    # –ù–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ! –°–æ–∑–¥–∞–µ–º –≤ –ë–î
                    ensure_user_exists(chat_user_id, chat_username, chat_first_name)
                    target_user_id = chat_user_id
                    await safe_reply(update, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {context.args[0]} –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                else:
                    chat_info = f"—á–∞—Ç: {update.effective_chat.title or update.effective_chat.id}" if update.effective_chat else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
                    return await safe_reply(update, 
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {context.args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∏ –≤ —á–∞—Ç–µ.\n\n"
                        f"üîç –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤: {chat_info}\n"
                        f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ –∏ –∏–º–µ–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π @username."
                    )
            
            target_username = context.args[0]
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        rating = get_rating(target_user_id)
        pt_userid = get_pt_userid(target_user_id)
        pt_info = f" (PlayTomic: {pt_userid})" if pt_userid else ""
        await safe_reply(update, f"üèÜ {target_username} —Ä–µ–π—Ç–∏–Ω–≥: {rating}{pt_info}")

    @staticmethod
    async def set_pt_userid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setptid - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID"""
        args = context.args
        current_user_id = update.effective_user.id
        is_user_admin = await is_admin(update, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∏ PlayTomic ID
        target_user_id = None
        pt_userid = None

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ -> user = replied (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if update.message and update.message.reply_to_message and len(args) == 1:
            if not is_user_admin:
                return await safe_reply(update, "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = update.message.reply_to_message.from_user.id
            pt_userid = args[0]

        # –í–∞—Ä–∏–∞–Ω—Ç 2: /setptid <user_id> <pt_userid> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].isdigit():
            if not is_user_admin:
                return await safe_reply(update, "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = int(args[0])
            pt_userid = args[1]

        # –í–∞—Ä–∏–∞–Ω—Ç 3: /setptid <pt_userid> ‚Äî —Å–µ–±–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        elif len(args) == 1:
            target_user_id = current_user_id
            pt_userid = args[0]

        if target_user_id is None or pt_userid is None:
            if is_user_admin:
                return await safe_reply(update, 
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setptid playtomic_username\n"
                    "‚Ä¢ –Ø–≤–Ω–æ –ø–æ user_id: /setptid 123456789 playtomic_username\n"
                    "‚Ä¢ –°–µ–±–µ: /setptid playtomic_username"
                )
            else:
                return await safe_reply(update, 
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –°–µ–±–µ: /setptid playtomic_username\n\n"
                    "üí° –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
                )

        set_pt_userid(target_user_id, pt_userid)
        who = "–≤–∞–º" if target_user_id == current_user_id else f"user_id={target_user_id}"
        await safe_reply(update, f"‚úÖ PlayTomic ID {who} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {pt_userid}")

    @staticmethod
    async def get_pt_userid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getptid - –ø–æ–ª—É—á–∏—Ç—å PlayTomic ID"""
        target_user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PlayTomic ID —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        pt_userid = get_pt_userid(target_user_id)
        if pt_userid:
            await safe_reply(update, f"üéæ {target_username} PlayTomic ID: {pt_userid}")
        else:
            await safe_reply(update, f"‚ùå {target_username} PlayTomic ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    @staticmethod
    async def get_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        target_user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        rating = get_rating(target_user_id)
        pt_userid = get_pt_userid(target_user_id)
        
        profile_text = f"üë§ {target_username} –ø—Ä–æ—Ñ–∏–ª—å:\n"
        profile_text += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
        if pt_userid:
            profile_text += f"üéæ PlayTomic ID: {pt_userid}"
        else:
            profile_text += f"üéæ PlayTomic ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        await safe_reply(update, profile_text)

    @staticmethod
    async def create_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /createuser - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await is_admin(update, context):
            return await safe_reply(update, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")

        args = context.args
        if len(args) < 1:
            return await safe_reply(update, 
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ /createuser <telegram_id> [rating] [playtomic_id]\n"
                "‚Ä¢ /createuser 123456789 25 john_player\n"
                "‚Ä¢ /createuser 987654321 15\n"
                "‚Ä¢ /createuser 555666777"
            )

        try:
            telegram_id = int(args[0])
            rating = int(args[1]) if len(args) > 1 and args[1].isdigit() else 0
            playtomic_id = args[2] if len(args) > 2 else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_rating = get_rating(telegram_id)
            if existing_rating is not None and telegram_id in [r[0] for r in get_all_users()]:
                return await safe_reply(update, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ensure_user_exists(telegram_id, None, None)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if rating > 0:
                set_rating(telegram_id, rating)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PlayTomic ID –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if playtomic_id:
                set_pt_userid(telegram_id, playtomic_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å–æ–∑–¥–∞–Ω!\n"
            response += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {get_rating(telegram_id)}\n"
            pt_id = get_pt_userid(telegram_id)
            if pt_id:
                response += f"üéæ PlayTomic ID: {pt_id}"
            
            await safe_reply(update, response)
            
        except ValueError:
            await safe_reply(update, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        except Exception as e:
            logger.error(f"Error creating user: {e}")
            await safe_reply(update, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    @staticmethod
    async def debug_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /debugchat - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ"""
        try:
            await safe_reply(update, "üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ...")
            
            chat = update.effective_chat
            user = update.effective_user
            
            response = f"üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            response += f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            response += f"   ID: {user.id}\n"
            response += f"   –ò–º—è: {user.first_name}\n"
            response += f"   Username: @{user.username or '–Ω–µ—Ç'}\n\n"
            
            if chat:
                response += f"üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
                response += f"   Chat ID: {chat.id}\n"
                response += f"   –¢–∏–ø: {chat.type}\n"
                response += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(chat, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
                
                # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
                try:
                    bot_member = await context.bot.get_chat_member(chat.id, context.bot.id)
                    response += f"ü§ñ –ë–æ—Ç –≤ —á–∞—Ç–µ: {bot_member.status}\n"
                except Exception as bot_error:
                    response += f"ü§ñ –ë–æ—Ç –≤ —á–∞—Ç–µ: –æ—à–∏–±–∫–∞ - {bot_error}\n"
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                try:
                    member_count = await context.bot.get_chat_member_count(chat.id)
                    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}\n"
                except Exception as count_error:
                    response += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –æ—à–∏–±–∫–∞ - {count_error}\n"
            else:
                response += f"üí¨ –ß–∞—Ç: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n"

            await safe_reply(update, response)
            
        except Exception as e:
            logger.error(f"Error in debug_chat_command: {e}")
            await safe_reply(update, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    @staticmethod
    async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /test - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            user = update.effective_user
            chat = update.effective_chat
            
            response = f"üß™ –¢–µ—Å—Ç –±–æ—Ç–∞:\n"
            response += f"üë§ –í–∞—à ID: {user.id}\n"
            response += f"üë§ –í–∞—à–µ –∏–º—è: {user.first_name}\n"
            response += f"üë§ Username: @{user.username or '–Ω–µ—Ç'}\n"
            response += f"üí¨ –¢–∏–ø —á–∞—Ç–∞: {chat.type}\n"
            response += f"üí¨ Chat ID: {chat.id}\n"
            if chat.title:
                response += f"üí¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            
            await safe_reply(update, response)
            
        except Exception as e:
            logger.error(f"Error in test command: {e}")
            await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")

    @staticmethod
    async def find_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /finduser @username - —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            args = context.args
            if not args:
                await safe_reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /finduser @username")
                return
            
            username = args[0]
            clean_username = username.lstrip('@')
            
            response = f"üîç –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ username:\n"
            response += f"–í–≤–æ–¥: '{username}'\n"
            response += f"–û—á–∏—â–µ–Ω–æ: '{clean_username}'\n"
            response += f"–ë—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å: '@{clean_username}'\n\n"
            
            await safe_reply(update, response + "–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
            
            user_id, found_username, first_name = await get_user_from_chat(update, context, username)
            
            if user_id:
                result = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!\n"
                result += f"üë§ ID: {user_id}\n"
                result += f"üë§ Username: @{found_username or '–Ω–µ—Ç'}\n"
                result += f"üë§ –ò–º—è: {first_name or '–Ω–µ—Ç'}\n"
            else:
                result = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ."
            
            await safe_reply(update, result)
            
        except Exception as e:
            logger.error(f"Error in find_user command: {e}")
            await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

    @staticmethod
    async def check_db_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /checkdb - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
        try:
            user = update.effective_user
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
            if user_exists_in_db(user.id):
                current_rating = get_rating(user.id)
                response = f"‚úÖ –í—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n"
                response += f"üë§ ID: {user.id}\n"
                response += f"üë§ –ò–º—è: {user.first_name}\n"
                response += f"üë§ Username: @{user.username or '–Ω–µ—Ç'}\n"
                response += f"üìä –†–µ–π—Ç–∏–Ω–≥: {current_rating}\n"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º PlayTomic ID
                pt_id = get_pt_userid(user.id)
                if pt_id:
                    response += f"üéæ PlayTomic ID: {pt_id}\n"
                else:
                    response += f"üéæ PlayTomic ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
            else:
                response = f"‚ùå –í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                response += f"üë§ –í–∞—à ID: {user.id}\n"
                response += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            
            await safe_reply(update, response)
            
        except Exception as e:
            logger.error(f"Error in check_db command: {e}")
            await safe_reply(update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT telegram_id, telegram_username, first_name, rating FROM user_ratings")
        return cursor.fetchall()
    finally:
        conn.close()

    @staticmethod
    async def get_user_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getuserid - –ø–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await is_admin(update, context):
            return await safe_reply(update, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")

        args = context.args
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user = update.message.reply_to_message.from_user
            response = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            response += f"üÜî Telegram ID: {target_user.id}\n"
            response += f"üë§ –ò–º—è: {target_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            response += f"üìù Username: @{target_user.username or '–Ω–µ—Ç'}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ
            rating = get_rating(target_user.id)
            pt_id = get_pt_userid(target_user.id)
            response += f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤ –ë–î: {rating}\n"
            if pt_id:
                response += f"üéæ PlayTomic ID: {pt_id}"
                
            await safe_reply(update, response)
            
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
        elif args and len(args) == 1 and args[0].startswith('@'):
            username = args[0]
            telegram_id = get_user_id_by_username(username)
            
            if telegram_id is None:
                await safe_reply(update, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                rating = get_rating(telegram_id)
                pt_id = get_pt_userid(telegram_id)
                
                response = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {username}:\n"
                response += f"üÜî Telegram ID: {telegram_id}\n"
                response += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                if pt_id:
                    response += f"üéæ PlayTomic ID: {pt_id}"
                    
                await safe_reply(update, response)
        else:
            await safe_reply(update, 
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /getuserid\n"
                "‚Ä¢ –ü–æ @username: /getuserid @john_doe"
            )
