import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ChatMemberStatus
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.models.database import get_db, UserRating

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import sqlite3
import os
from datetime import datetime

def get_db_path():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º local_rating_bot.db
    default_url = "sqlite+aiosqlite:///./local_rating_bot.db"
    db_url = os.getenv("DATABASE_URL", default_url)
    return db_url.replace("sqlite+aiosqlite:///", "")

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db_path = get_db_path()
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn

def ensure_user_exists(telegram_id: int, username: str = None, first_name: str = None):
    """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ"""
    conn = get_db_connection()
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å
        conn.execute(
            "INSERT OR IGNORE INTO user_ratings (telegram_id, telegram_username, first_name, rating, created_at, updated_at) VALUES (?, ?, ?, ?, ?, ?)",
            (telegram_id, username, first_name, 0, datetime.now(), datetime.now())
        )
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º username –∏ first_name (–æ–Ω–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        if username is not None or first_name is not None:
            conn.execute(
                "UPDATE user_ratings SET telegram_username = ?, first_name = ?, updated_at = ? WHERE telegram_id = ?",
                (username, first_name, datetime.now(), telegram_id)
            )
        
        conn.commit()
    finally:
        conn.close()

def parse_rating(rating_str: str) -> float:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
    try:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        normalized_str = rating_str.replace(',', '.')
        rating = float(normalized_str)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return round(rating, 2)
    except ValueError:
        return None

def is_valid_rating(rating_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
    return parse_rating(rating_str) is not None

def get_user_id_by_username(username: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ username"""
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    clean_username = username.lstrip('@').lower()
    
    conn = get_db_connection()
    try:
        cursor = conn.execute(
            "SELECT telegram_id FROM user_ratings WHERE LOWER(telegram_username) = ?", 
            (clean_username,)
        )
        result = cursor.fetchone()
        return result[0] if result else None
    finally:
        conn.close()

def set_rating(user_id: int, rating: float):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    ensure_user_exists(user_id)
    conn = get_db_connection()
    try:
        conn.execute(
            "UPDATE user_ratings SET rating = ?, updated_at = ? WHERE telegram_id = ?",
            (rating, datetime.now(), user_id)
        )
        conn.commit()
    finally:
        conn.close()

def get_rating(user_id: int) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT rating FROM user_ratings WHERE telegram_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result and result[0] is not None else 0.0
    finally:
        conn.close()

def set_pt_userid(user_id: int, pt_userid: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    ensure_user_exists(user_id)
    conn = get_db_connection()
    try:
        conn.execute(
            "UPDATE user_ratings SET PT_userId = ?, updated_at = ? WHERE telegram_id = ?",
            (pt_userid, datetime.now(), user_id)
        )
        conn.commit()
    finally:
        conn.close()

def get_pt_userid(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å PlayTomic ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT PT_userId FROM user_ratings WHERE telegram_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result and result[0] is not None else ""
    finally:
        conn.close()

# --- helper: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    chat = update.effective_chat
    user = update.effective_user
    if not chat or chat.type == "private":
        # –í –ª–∏—á–∫–µ –∑–∞–ø—Ä–µ—â–∞–µ–º (–º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ True, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ ¬´–∏–∑–≤–µ—Å—Ç–Ω—ã–º¬ª –∞–¥–º–∏–Ω–∞–º)
        return False
    member = await context.bot.get_chat_member(chat.id, user.id)
    return member.status in (ChatMemberStatus.OWNER, ChatMemberStatus.ADMINISTRATOR)

class RatingBot:
    @staticmethod
    async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user = update.effective_user
        welcome_text = f"""
üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rating Bot, {user.first_name}!

–≠—Ç–æ—Ç –±–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ PlayTomic ID.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/getrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–º–æ—â—å
        """
        await update.message.reply_text(welcome_text)

    @staticmethod
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        is_user_admin = await is_admin(update, context)
        
        if is_user_admin:
            help_text = """
üéæ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä):

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/getuserrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/createuser - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –§–æ—Ä–º–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
‚Ä¢ /setrating @username 25 - –ø–æ @username (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –ë–î)
‚Ä¢ /setrating 123456789 25 - –ø–æ telegram_id (—Å–æ–∑–¥–∞–µ—Ç –µ—Å–ª–∏ –Ω–µ—Ç)
‚Ä¢ /setrating 25 (–≤ –æ—Ç–≤–µ—Ç) - –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ /setrating 25 - —Å–µ–±–µ

‚Ä¢ /createuser 123456789 25 john_player - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /getrating @username - —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ @username
‚Ä¢ /getrating 123456789 - —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ telegram_id
            """
        else:
            help_text = """
üéæ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/getrating - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
/getuserrating - –£–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/setrating - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
/setptid - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π PlayTomic ID
/getptid - –£–∑–Ω–∞—Ç—å PlayTomic ID
/profile - –°–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ /setrating 12 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ —Ä–µ–π—Ç–∏–Ω–≥
‚Ä¢ /getrating @username - —É–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ /profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å

üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º:
‚Ä¢ /setrating @username 25
            """
        
        await update.message.reply_text(help_text)

    @staticmethod
    async def get_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getrating - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"""
        user_id = update.effective_user.id
        rating = get_rating(user_id)
        
        await update.message.reply_text(f"üèÜ –í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}")

    @staticmethod
    async def set_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setrating - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥"""
        args = context.args
        current_user_id = update.effective_user.id
        current_username = update.effective_user.username
        current_first_name = update.effective_user.first_name
        is_user_admin = await is_admin(update, context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        ensure_user_exists(current_user_id, current_username, current_first_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
        target_user_id = None
        rating_val = None
        target_display_name = None

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ -> user = replied (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if update.message and update.message.reply_to_message and len(args) == 1 and is_valid_rating(args[0]):
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = update.message.reply_to_message.from_user.id
            target_display_name = update.message.reply_to_message.from_user.first_name
            rating_val = parse_rating(args[0])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            ensure_user_exists(target_user_id, update.message.reply_to_message.from_user.username, 
                             update.message.reply_to_message.from_user.first_name)

        # –í–∞—Ä–∏–∞–Ω—Ç 2: /setrating @username <rating> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].startswith('@') and is_valid_rating(args[1]):
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = get_user_id_by_username(args[0])
            if target_user_id is None:
                return await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    f"üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    f"/setrating <telegram_id> <rating>\n\n"
                    f"–ü—Ä–∏–º–µ—Ä: /setrating 123456789 {args[1]}"
                )
            target_display_name = args[0]
            rating_val = parse_rating(args[1])

        # –í–∞—Ä–∏–∞–Ω—Ç 3: /setrating <user_id> <rating> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].isdigit() and is_valid_rating(args[1]):
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = int(args[0])
            target_display_name = f"user_id={target_user_id}"
            rating_val = parse_rating(args[1])
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            ensure_user_exists(target_user_id, None, None)

        # –í–∞—Ä–∏–∞–Ω—Ç 4: /setrating <rating> ‚Äî —Å–µ–±–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        elif len(args) == 1 and is_valid_rating(args[0]):
            target_user_id = current_user_id
            target_display_name = "–≤–∞–º"
            rating_val = parse_rating(args[0])

        if target_user_id is None or rating_val is None:
            if is_user_admin:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setrating 2.5\n"
                    "‚Ä¢ –ü–æ @username: /setrating @john_doe 2,3\n"
                    "‚Ä¢ –ü–æ user_id: /setrating 123456789 1.75\n"
                    "‚Ä¢ –°–µ–±–µ: /setrating 2.0\n\n"
                    "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞: 2.5, 1,3, 0.7"
                )
            else:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –°–µ–±–µ: /setrating 2.5\n\n"
                    "üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞: 2.5, 1,3, 0.7\n"
                    "üí° –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
                )

        set_rating(target_user_id, rating_val)
        await update.message.reply_text(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {target_display_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating_val}")

    @staticmethod
    async def get_user_rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, @username –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        target_user_id = None
        target_username = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
        elif context.args and len(context.args) == 1 and context.args[0].startswith('@'):
            target_user_id = get_user_id_by_username(context.args[0])
            if target_user_id is None:
                return await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {context.args[0]} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            target_username = context.args[0]
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        rating = get_rating(target_user_id)
        pt_userid = get_pt_userid(target_user_id)
        pt_info = f" (PlayTomic: {pt_userid})" if pt_userid else ""
        await update.message.reply_text(f"üèÜ {target_username} —Ä–µ–π—Ç–∏–Ω–≥: {rating}{pt_info}")

    @staticmethod
    async def set_pt_userid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /setptid - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PlayTomic ID"""
        args = context.args
        current_user_id = update.effective_user.id
        is_user_admin = await is_admin(update, context)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –∏ PlayTomic ID
        target_user_id = None
        pt_userid = None

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ -> user = replied (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if update.message and update.message.reply_to_message and len(args) == 1:
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = update.message.reply_to_message.from_user.id
            pt_userid = args[0]

        # –í–∞—Ä–∏–∞–Ω—Ç 2: /setptid <user_id> <pt_userid> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].isdigit():
            if not is_user_admin:
                return await update.message.reply_text("‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞.")
            target_user_id = int(args[0])
            pt_userid = args[1]

        # –í–∞—Ä–∏–∞–Ω—Ç 3: /setptid <pt_userid> ‚Äî —Å–µ–±–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        elif len(args) == 1:
            target_user_id = current_user_id
            pt_userid = args[0]

        if target_user_id is None or pt_userid is None:
            if is_user_admin:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setptid playtomic_username\n"
                    "‚Ä¢ –Ø–≤–Ω–æ –ø–æ user_id: /setptid 123456789 playtomic_username\n"
                    "‚Ä¢ –°–µ–±–µ: /setptid playtomic_username"
                )
            else:
                return await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                    "‚Ä¢ –°–µ–±–µ: /setptid playtomic_username\n\n"
                    "üí° –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å PlayTomic ID –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
                )

        set_pt_userid(target_user_id, pt_userid)
        who = "–≤–∞–º" if target_user_id == current_user_id else f"user_id={target_user_id}"
        await update.message.reply_text(f"‚úÖ PlayTomic ID {who} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {pt_userid}")

    @staticmethod
    async def get_pt_userid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getptid - –ø–æ–ª—É—á–∏—Ç—å PlayTomic ID"""
        target_user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º PlayTomic ID —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        pt_userid = get_pt_userid(target_user_id)
        if pt_userid:
            await update.message.reply_text(f"üéæ {target_username} PlayTomic ID: {pt_userid}")
        else:
            await update.message.reply_text(f"‚ùå {target_username} PlayTomic ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    @staticmethod
    async def get_profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        target_user_id = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user_id = update.message.reply_to_message.from_user.id
            target_username = update.message.reply_to_message.from_user.first_name
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω user_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        elif context.args and len(context.args) == 1 and context.args[0].isdigit():
            target_user_id = int(context.args[0])
            target_username = f"user_id={target_user_id}"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user_id = update.effective_user.id
            target_username = "–í–∞—à"

        rating = get_rating(target_user_id)
        pt_userid = get_pt_userid(target_user_id)
        
        profile_text = f"üë§ {target_username} –ø—Ä–æ—Ñ–∏–ª—å:\n"
        profile_text += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
        if pt_userid:
            profile_text += f"üéæ PlayTomic ID: {pt_userid}"
        else:
            profile_text += f"üéæ PlayTomic ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        await update.message.reply_text(profile_text)

    @staticmethod
    async def create_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /createuser - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await is_admin(update, context):
            return await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")

        args = context.args
        if len(args) < 1:
            return await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ /createuser <telegram_id> [rating] [playtomic_id]\n"
                "‚Ä¢ /createuser 123456789 25 john_player\n"
                "‚Ä¢ /createuser 987654321 15\n"
                "‚Ä¢ /createuser 555666777"
            )

        try:
            telegram_id = int(args[0])
            rating = parse_rating(args[1]) if len(args) > 1 and is_valid_rating(args[1]) else 0.0
            playtomic_id = args[2] if len(args) > 2 else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_rating = get_rating(telegram_id)
            if existing_rating is not None and telegram_id in [r[0] for r in get_all_users()]:
                return await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ensure_user_exists(telegram_id, None, None)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if rating > 0:
                set_rating(telegram_id, rating)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PlayTomic ID –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if playtomic_id:
                set_pt_userid(telegram_id, playtomic_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å–æ–∑–¥–∞–Ω!\n"
            response += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {get_rating(telegram_id)}\n"
            pt_id = get_pt_userid(telegram_id)
            if pt_id:
                response += f"üéæ PlayTomic ID: {pt_id}"
            
            await update.message.reply_text(response)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        except Exception as e:
            logger.error(f"Error creating user: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT telegram_id, telegram_username, first_name, rating FROM user_ratings")
        return cursor.fetchall()
    finally:
        conn.close()

    @staticmethod
    async def get_user_id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /getuserid - –ø–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        if not await is_admin(update, context):
            return await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")

        args = context.args
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message and update.message.reply_to_message:
            target_user = update.message.reply_to_message.from_user
            response = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            response += f"üÜî Telegram ID: {target_user.id}\n"
            response += f"üë§ –ò–º—è: {target_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            response += f"üìù Username: @{target_user.username or '–Ω–µ—Ç'}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ
            rating = get_rating(target_user.id)
            pt_id = get_pt_userid(target_user.id)
            response += f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –≤ –ë–î: {rating}\n"
            if pt_id:
                response += f"üéæ PlayTomic ID: {pt_id}"
                
            await update.message.reply_text(response)
            
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username
        elif args and len(args) == 1 and args[0].startswith('@'):
            username = args[0]
            telegram_id = get_user_id_by_username(username)
            
            if telegram_id is None:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                rating = get_rating(telegram_id)
                pt_id = get_pt_userid(telegram_id)
                
                response = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {username}:\n"
                response += f"üÜî Telegram ID: {telegram_id}\n"
                response += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
                if pt_id:
                    response += f"üéæ PlayTomic ID: {pt_id}"
                    
                await update.message.reply_text(response)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /getuserid\n"
                "‚Ä¢ –ü–æ @username: /getuserid @john_doe"
            )
