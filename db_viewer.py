#!/usr/bin/env python3
"""
–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö SQLite –±–∞–∑—ã —á–µ—Ä–µ–∑ Python
"""

import sqlite3
import sys
from datetime import datetime
from tabulate import tabulate

def connect_db(db_path="local_rating_bot.db"):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {db_path}: {e}")
        return None

def show_tables(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    print("üìã –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    for table in tables:
        print(f"  ‚Ä¢ {table[0]}")
    print()

def show_table_schema(conn, table_name):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.execute(f"PRAGMA table_info({table_name});")
    columns = cursor.fetchall()
    
    print(f"üèóÔ∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã '{table_name}':")
    headers = ["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¢–∏–ø", "–ù–µ NULL", "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é", "–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á"]
    rows = []
    for col in columns:
        rows.append([col[0], col[1], col[2], "–î–∞" if col[3] else "–ù–µ—Ç", 
                    col[4] if col[4] else "-", "–î–∞" if col[5] else "–ù–µ—Ç"])
    
    print(tabulate(rows, headers=headers, tablefmt="grid"))
    print()

def show_table_data(conn, table_name, limit=20):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        cursor = conn.execute(f"SELECT * FROM {table_name} LIMIT {limit};")
        rows = cursor.fetchall()
        
        if not rows:
            print(f"üì≠ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –ø—É—Å—Ç–∞—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        columns = [description[0] for description in cursor.description]
        
        print(f"üìä –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}' (–ø–æ–∫–∞–∑–∞–Ω–æ –¥–æ {limit} –∑–∞–ø–∏—Å–µ–π):")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        data_rows = []
        for row in rows:
            formatted_row = []
            for i, value in enumerate(row):
                if columns[i] in ['created_at', 'updated_at'] and value:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                    try:
                        dt = datetime.fromisoformat(value.replace('Z', '+00:00'))
                        formatted_row.append(dt.strftime('%Y-%m-%d %H:%M'))
                    except:
                        formatted_row.append(value)
                else:
                    formatted_row.append(value if value is not None else "NULL")
            data_rows.append(formatted_row)
        
        print(tabulate(data_rows, headers=columns, tablefmt="grid"))
        print(f"\nüìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

def add_test_data(conn):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    test_users = [
        (111111, "testuser1", 15),
        (222222, "testuser2", 25), 
        (333333, "testuser3", 35),
    ]
    
    try:
        for telegram_id, pt_userid, rating in test_users:
            conn.execute(
                "INSERT OR REPLACE INTO user_ratings (telegram_id, PT_userId, rating, created_at, updated_at) VALUES (?, ?, ?, ?, ?)",
                (telegram_id, pt_userid, rating, datetime.now(), datetime.now())
            )
        conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    db_path = sys.argv[1] if len(sys.argv) > 1 else "local_rating_bot.db"
    
    print(f"üóÑÔ∏è  –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    print("=" * 50)
    
    conn = connect_db(db_path)
    if not conn:
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
        show_tables(conn)
        show_table_schema(conn, "user_ratings")
        show_table_data(conn, "user_ratings")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        if sys.stdin.isatty():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
            try:
                if input("\n‚ùì –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower() == 'y':
                    add_test_data(conn)
                    print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    show_table_data(conn, "user_ratings")
            except (EOFError, KeyboardInterrupt):
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python db_viewer.py")
            
    finally:
        conn.close()

if __name__ == "__main__":
    main()
