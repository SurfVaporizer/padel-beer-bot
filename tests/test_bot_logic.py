"""
–¢–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
"""
import pytest
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.rating_bot import user_ratings, set_rating, get_rating


class MockUpdate:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è Update"""
    def __init__(self, user_id, chat_type="group", reply_user_id=None):
        self.effective_user = MockUser(user_id)
        self.effective_chat = MockChat(chat_type)
        self.message = MockMessage(reply_user_id) if reply_user_id else None


class MockUser:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è User"""
    def __init__(self, user_id):
        self.id = user_id


class MockChat:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è Chat"""
    def __init__(self, chat_type):
        self.type = chat_type


class MockMessage:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è Message"""
    def __init__(self, reply_user_id=None):
        self.reply_to_message = MockReplyMessage(reply_user_id) if reply_user_id else None


class MockReplyMessage:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è Reply Message"""
    def __init__(self, user_id):
        self.from_user = MockUser(user_id)


class TestBotLogic:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞"""
    
    def setup_method(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        user_ratings.clear()
    
    def simulate_is_admin(self, user_id: int, chat_type: str = "group") -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if chat_type == "private":
            return False
        return user_id == 111  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 111 - –∞–¥–º–∏–Ω
    
    def simulate_setrating_logic(self, current_user_id: int, args: list, 
                                chat_type: str = "group", reply_user_id: int = None):
        """–°–∏–º—É–ª—è—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /setrating"""
        is_user_admin = self.simulate_is_admin(current_user_id, chat_type)
        
        target_user_id = None
        rating_val = None
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        if reply_user_id and len(args) == 1 and args[0].isdigit():
            if not is_user_admin:
                return "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞."
            target_user_id = reply_user_id
            rating_val = int(args[0])
        
        # –í–∞—Ä–∏–∞–Ω—Ç 2: /setrating <user_id> <rating> (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        elif len(args) == 2 and args[0].isdigit() and args[1].isdigit():
            if not is_user_admin:
                return "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞."
            target_user_id = int(args[0])
            rating_val = int(args[1])
        
        # –í–∞—Ä–∏–∞–Ω—Ç 3: /setrating <rating> ‚Äî —Å–µ–±–µ (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
        elif len(args) == 1 and args[0].isdigit():
            target_user_id = current_user_id
            rating_val = int(args[0])
        
        if target_user_id is None or rating_val is None:
            if is_user_admin:
                return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n‚Ä¢ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setrating 12\n‚Ä¢ –Ø–≤–Ω–æ –ø–æ user_id: /setrating 123456789 12\n‚Ä¢ –°–µ–±–µ: /setrating 12"
            else:
                return "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n‚Ä¢ –°–µ–±–µ: /setrating 12\n\nüí° –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
        
        set_rating(target_user_id, rating_val)
        who = "–≤–∞–º" if target_user_id == current_user_id else f"user_id={target_user_id}"
        return f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {who} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating_val}"
    
    def test_user_sets_own_rating(self):
        """–¢–µ—Å—Ç: –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–±–µ —Ä–µ–π—Ç–∏–Ω–≥"""
        result = self.simulate_setrating_logic(222, ["10"])
        
        assert "‚úÖ –†–µ–π—Ç–∏–Ω–≥ –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 10" == result
        assert get_rating(222) == 10
    
    def test_user_cannot_set_others_rating(self):
        """–¢–µ—Å—Ç: –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–æ–º—É"""
        result = self.simulate_setrating_logic(222, ["333", "15"])
        
        assert "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞." in result
        assert get_rating(333) == 0
    
    def test_admin_sets_others_rating(self):
        """–¢–µ—Å—Ç: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        result = self.simulate_setrating_logic(111, ["333", "20"])
        
        assert "‚úÖ –†–µ–π—Ç–∏–Ω–≥ user_id=333 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 20" == result
        assert get_rating(333) == 20
    
    def test_admin_sets_rating_via_reply(self):
        """–¢–µ—Å—Ç: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        result = self.simulate_setrating_logic(111, ["25"], reply_user_id=444)
        
        assert "‚úÖ –†–µ–π—Ç–∏–Ω–≥ user_id=444 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 25" == result
        assert get_rating(444) == 25
    
    def test_user_cannot_set_rating_via_reply(self):
        """–¢–µ—Å—Ç: –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç"""
        result = self.simulate_setrating_logic(222, ["30"], reply_user_id=555)
        
        assert "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞." in result
        assert get_rating(555) == 0
    
    def test_private_chat_user_sets_own_rating(self):
        """–¢–µ—Å—Ç: –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–±–µ —Ä–µ–π—Ç–∏–Ω–≥"""
        result = self.simulate_setrating_logic(666, ["35"], chat_type="private")
        
        assert "‚úÖ –†–µ–π—Ç–∏–Ω–≥ –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 35" == result
        assert get_rating(666) == 35
    
    def test_invalid_arguments_user(self):
        """–¢–µ—Å—Ç: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = self.simulate_setrating_logic(222, ["abc"])
        
        assert "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:" in result
        assert "–°–µ–±–µ: /setrating 12" in result
        assert "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" in result
    
    def test_invalid_arguments_admin(self):
        """–¢–µ—Å—Ç: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        result = self.simulate_setrating_logic(111, ["abc"])
        
        assert "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:" in result
        assert "–í –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: /setrating 12" in result
        assert "–Ø–≤–Ω–æ –ø–æ user_id: /setrating 123456789 12" in result
    
    def test_zero_rating(self):
        """–¢–µ—Å—Ç: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω—É–ª–µ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        result = self.simulate_setrating_logic(222, ["0"])
        
        assert "‚úÖ –†–µ–π—Ç–∏–Ω–≥ –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 0" == result
        assert get_rating(222) == 0
    
    def test_negative_rating_admin(self):
        """–¢–µ—Å—Ç: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥"""
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
        def simulate_setrating_logic_negative(self, current_user_id: int, args: list, 
                                            chat_type: str = "group", reply_user_id: int = None):
            is_user_admin = self.simulate_is_admin(current_user_id, chat_type)
            
            target_user_id = None
            rating_val = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
            def is_number(s):
                try:
                    int(s)
                    return True
                except ValueError:
                    return False
            
            if len(args) == 1 and is_number(args[0]):
                target_user_id = current_user_id
                rating_val = int(args[0])
            elif len(args) == 2 and is_number(args[0]) and is_number(args[1]):
                if not is_user_admin:
                    return "‚ùå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞."
                target_user_id = int(args[0])
                rating_val = int(args[1])
            
            if target_user_id is None or rating_val is None:
                return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
            
            set_rating(target_user_id, rating_val)
            who = "–≤–∞–º" if target_user_id == current_user_id else f"user_id={target_user_id}"
            return f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {who} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {rating_val}"
        
        result = simulate_setrating_logic_negative(self, 111, ["333", "-5"])
        
        assert "‚úÖ –†–µ–π—Ç–∏–Ω–≥ user_id=333 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: -5" == result
        assert get_rating(333) == -5


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
